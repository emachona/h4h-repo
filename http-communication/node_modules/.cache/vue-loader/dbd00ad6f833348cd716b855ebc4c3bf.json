{"remainingRequest":"C:\\Users\\Marija Miloshevska\\EDU\\http-communication\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Marija Miloshevska\\EDU\\http-communication\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Marija Miloshevska\\EDU\\http-communication\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Marija Miloshevska\\EDU\\http-communication\\src\\components\\HttpCommunication.vue?vue&type=template&id=b91b45a4&scoped=true&","dependencies":[{"path":"C:\\Users\\Marija Miloshevska\\EDU\\http-communication\\src\\components\\HttpCommunication.vue","mtime":1639919480145},{"path":"C:\\Users\\Marija Miloshevska\\EDU\\http-communication\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638882488119},{"path":"C:\\Users\\Marija Miloshevska\\EDU\\http-communication\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1638882494434},{"path":"C:\\Users\\Marija Miloshevska\\EDU\\http-communication\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638882488119},{"path":"C:\\Users\\Marija Miloshevska\\EDU\\http-communication\\node_modules\\vue-loader\\lib\\index.js","mtime":1638882494434}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}