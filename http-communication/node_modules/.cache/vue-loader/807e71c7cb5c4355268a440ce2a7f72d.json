{"remainingRequest":"/home/user/Downloads/EDU/http-communication/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/user/Downloads/EDU/http-communication/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/user/Downloads/EDU/http-communication/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/user/Downloads/EDU/http-communication/src/components/HttpCommunication.vue?vue&type=template&id=b91b45a4&scoped=true&","dependencies":[{"path":"/home/user/Downloads/EDU/http-communication/src/components/HttpCommunication.vue","mtime":1640336966360},{"path":"/home/user/Downloads/EDU/http-communication/node_modules/cache-loader/dist/cjs.js","mtime":1640088775134},{"path":"/home/user/Downloads/EDU/http-communication/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640088779699},{"path":"/home/user/Downloads/EDU/http-communication/node_modules/cache-loader/dist/cjs.js","mtime":1640088775134},{"path":"/home/user/Downloads/EDU/http-communication/node_modules/vue-loader/lib/index.js","mtime":1640088779699}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}